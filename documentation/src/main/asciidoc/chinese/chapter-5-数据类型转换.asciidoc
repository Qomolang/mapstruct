== 数据类型转换

source字段和target字段的类型并不总是一致。 比如原生类型的转换，一个字段在source bean中是int型，但在target中需要是Long型。 再比如引用类型的转换，假设Car类中有一个Person类型的字段driver，在target中要转换为PersonDto类型。

在本节中，您将学到如何使用MapStruct来进行类似的转换。

=== 隐式类型转换

MapStruct会自动处理很多种类型转换。 比如，有一个字段，在source bean中为int类型，在target中则为String类型。生成的实现中会自动调用String#valueOf(int)，反之则会调用Integer#parseInt(String)。

目前，会自动执行的类型转换如下：

* 所有的java原生数据类型和对应的包装类之间的转换。比如int和Integer，boolean和Boolean等。生成的代码是null敏感的。比如把一个包装类转换为对应的原生类型时，会先有一个null值校验。
* 所有的java原生数字类型和数字包装类之间的转换。比如int、long、byte和Integer之间的转换。
+
____
较长型转换为较短型时（比如long型转化为int型）会导致精度损失。Mapper和MapperConfig注解中有一个方法typeConversionPolicy，该方法可以控制此种情况下是打warning还是error。因为要保持向后兼容，所以目前的默认值是ReportingPolicy.IGNORE。
____

* 所有的java原生类型（及其包装类）与String之间的转换。比如int和String之间 Boolean和String之间。可以指定为符合java.text.DecimalFormat格式的格式化字符串，比如int to String的例子：

----
@Mapper
public interface CarMapper {

    @Mapping(source = "price", numberFormat = "$#.00")
    CarDto carToCarDto(Car car);

    @IterableMapping(numberFormat = "$#.00")
    List<String> prices(List<Integer> prices);
}
----

* 枚举类型和String之间的转化
* 大数类型（java.math.BigInteger, java.math.BigDecimal）与java原生类型（及其包装类）和String之间的转换。可以指定为符合java.text.DecimalFormat格式的格式化字符串，比如BigDecimal to String的例子：

----
public interface CarMapper {

    @Mapping(source = "power", numberFormat = "#.##E0")
    CarDto carToCarDto(Car car);

}
----

* JAXBElement+++<T>+++与 T 之间的转换, List<JAXBElement+++<T>+++> 与 List+++<T>+++之间的转换+++</T>++++++</T>++++++</T>+++
* java.util.Calendar/java.util.Date 与 JAXB的XMLGregorianCalendar 之间的转换
* java.util.Date/XMLGregorianCalendar 与 String 之间转换。可以通过dateFormat 选项，来指定符合java.text.SimpleDateFormat格式的格式化字符串，比如Date to String的例子：

----
@Mapper
public interface CarMapper {

    @Mapping(source = "manufacturingDate", dateFormat = "dd.MM.yyyy")
    CarDto carToCarDto(Car car);

    @IterableMapping(dateFormat = "dd.MM.yyyy")
    List<String> stringListToDateList(List<Date> dates);
}
----

* Jodas的org.joda.time.DateTime, org.joda.time.LocalDateTime, org.joda.time.LocalDate, org.joda.time.LocalTime与String之间的转换。可以通过dateFormat 选项，来指定符合java.text.SimpleDateFormat格式的格式化字符串，例子同上。
* Jodas的org.joda.time.DateTime和javax.xml.datatype.XMLGregorianCalendar, java.util.Calendar之间的转换。
* Jodas org.joda.time.LocalDateTime, org.joda.time.LocalDate和javax.xml.datatype.XMLGregorianCalendar, java.util.Date之间的转换。
* java.time.LocalDate, java.time.LocalDateTime和javax.xml.datatype.XMLGregorianCalendar之间的转换。
* 来自java8的日期包的java.time.ZonedDateTime, java.time.LocalDateTime, java.time.LocalDate, java.time.LocalTime和String之间的转换。可以通过dateFormat 选项，来指定符合java.text.SimpleDateFormat格式的格式化字符串，例子同上。
* 来自java8的日期包的java.time.Instant, java.time.Duration, java.time.Period和String之间的转换。转换成String时默认用toString()方法，从String解析时默认用parse()方法。
* 来自java8的日期包的java.time.ZonedDateTime和java.util.Date之间的转换。当把Date映射为ZonedDateTime时，会使用系统默认时区。
* 来自java8的日期包的java.time.LocalDateTime和java.util.Date之间的转换，转换时会使用UTC作为当前时区。
* 来自java8的日期包的java.time.LocalDate和java.util.Date / java.sql.Date之间的转换，转换时会使用UTC作为当前时区。
* 来自java8的日期包的java.time.Instant和java.util.Date之间的转换。
* 来自java8的日期包的java.time.ZonedDateTime和java.util.Calendar之间的转换。
* java.sql.Date和java.util.Date之间的转换。
* java.sql.Time和java.util.Date之间的转换。
* java.sql.Timestamp和java.util.Date之间的转换。
* 当从String映射为其他值的时候，请忽略Mapping#dateFormat。该选项会导致默认模式和数据格式符号会应用到默认区域环境（locale）中。一个该规则导致的异常是XmlGregorianCalendar因根据 https://www.w3.org/TR/xmlschema-2/#dateTime[XML Schema 1.0 Part 2, Section 3.2.7-14.1, Lexical Representation]解析String而导致。
* java.util.Currency和String之间的转换。
 ** 当String要转化为Currency时，该String要合乎 https://en.wikipedia.org/wiki/ISO_4217[ISO-4217]标准，否则会抛出IllegalArgumentException异常。
* java.util.UUID和String之间的转换。
 ** 当String要转化为UUID时，该String要合乎 https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]的标准，否则会抛出IllegalArgumentException异常。
* String和StringBuilder之间的转换。
* java.net.URL和String之间的转换。
 ** 当String要转化为URL时，该String要合乎 https://en.wikipedia.org/wiki/URL[UTL]的标准，否则会抛出IllegalArgumentException异常。

=== 对象引用的映射

通常，一个对象不会只包含原生类型，还有引用其他对象，比如Car类中可能会引用一个Person实例（即这辆车的"`司机`"）。那么在Car\->CarDto的映射过程中，可能还需要把Person映射为PersonDto。

此时，仅需为引用对象的数据类型也做个映射，例子如下：

----
@Mapper
public interface CarMapper {

    CarDto carToCarDto(Car car);

    PersonDto personToPersonDto(Person person);
}
----

生成的personToPersonDto()会完成Person到PersonDto的映射，而生成的carToCarDto()方法实现会调用personToPersonDto()来完成driver字段的映射。

这种方法可以映射任意深度的对象图（object graphs）。当把Entity映射为DTO时，您可能经常需要在某个地方把引用指向另一个对象。通过自定义映射（见下节），您可以更灵活地实现这一点，比如把一个entity映射为它的id。

当生成映射方法的实现时，对于每一对对应的source和target字段，MapStruct会依次执行以下操作：

. 如果source字段和target字段是相同的类型，则MapStruct就会简单地把值从source复制到target上。如果source字段是一个集合(比如list)，那么target字段会被设置为该集合的一个拷贝(译注：集合本身是深拷贝，里面的元素为浅拷贝)
. 如果source字段和target字段是不同的类型，则检查是否已经存在一个 以source字段类型作为入参 并且 以target字段类型作为出参的方法。如果存在，则调用该方法完成映射。
. 如果没有这种方法，则MapStruct会检查是否存在一个内建的（译注：即上文提到的Int\->String这种隐式转换） 以source字段类型作为入参 并且 以target字段类型作为出参的转换。如果存在，则生成的代码会应用该转换。
. 如果没有这种方法，则MapStruct会进行复杂的转换
 .. 先映射方法，结果再由映射方法得到，如：target = method1( method2( source ) )
 .. 先内建转换，结果再由映射方法得到，如：target = method( conversion( source ) )
 .. 先映射方法，结果再由内建转换得到，如：target = conversion( method( source ) )
. 如果没有该种方法，则MapStruct会试着自动生成一个子映射，来完成source和target字段的映射。
. 如果MapStruct创建不了一个基于名字的映射方法，则在构建期间会报错，错误中会指明无法映射的字段和属性。

映射控制（MappingControl）可以在所有层级定义（@MapperConfig, @Mapper, @BeanMapping, @Mapping 优先级依次升高）。举个例子： @Mapper( mappingControl = NoComplexMapping.class ) 比@MapperConfig( mappingControl = DeepClone.class )的优先级高。 @IterableMapping和@MapMapping与@Mapping类似。

MappingControl是一项自MapStruct 1.4开始的实验性功能。MappingControl 有对应上文前四条选项的枚举：MappingControl.Use#DIRECT, MappingControl.Use#MAPPING_METHOD, MappingControl.Use#BUILT_IN_CONVERSION 和 MappingControl.Use#COMPLEX_MAPPING。每一项都允许用户自己选择是否要打开该选项。所有选项默认全部开启，所以所有的映射选项都是默认开启的。

____
对于上面的第五条，如果不想MapStruct自动生成子映射方法，您可以使用@Mapper( disableSubMappingMethodsGeneration = true ).
用户可以通过元注解完全控制映射。一些方便的注解已经被定义，比如@DeepClone，该注解仅允许直接映射（译注：即规则中的第一条），这会使得scourse和target的类型是一致的，MapStruct会对source进行深克隆。此时必须保证"`子映射方法`"是开启的（默认开启）。 在子映射方法的自动生成过程中，共享配置（详见11.3）目前还不会生效。请关注issue https://github.com/mapstruct/mapstruct/issues/1086[#1086]获得更多信息。 target对象的构造器属性也会被认为是target属性，您可以阅读3.9获得更多信息。
____

=== 控制嵌套bean的映射

如前文所述，MapStruct 会基于source和target字段的名字来生成方法实现。但不幸的是，名字不匹配的情况很多。

当名称不匹配时，可以用@Mapping注解中source或者target中的"`.`"符号来控制如何映射。在我们的样例库中，有一个详尽的 https://github.com/mapstruct/mapstruct-examples/tree/master/mapstruct-nested-bean-mappings[例子]来展示这类问题是如何被解决的。

在最简单的场景中，有个字段在某个嵌套层级上需要被订正。比如，FishTankDto类和FishTank类中都有一个fish字段，那么MapStruct会自动生成映射实现：FishDto fishToFishDto(Fish fish)，但是MapStruct不能自动把嵌套的type字段映射到对应的kind字段上。此时这种情况可以用下面的映射规则完成：@Mapping(target="fish.kind", source="fish.type")。这会让MapStruct在该层级上把一个叫kind的字段映射为type。

----
@Mapper
public interface FishTankMapper {

    @Mapping(target = "fish.kind", source = "fish.type")
    @Mapping(target = "fish.name", ignore = true)
    @Mapping(target = "ornament", source = "interior.ornament")
    @Mapping(target = "material.materialType", source = "material")
    @Mapping(target = "quality.report.organisation.name", source = "quality.report.organisationName")
    FishTankDto map( FishTank source );
}
----

上面例子中第二行的@Mapping规则展示了如何在某一层级上忽略某个字段。

MapStruct可以对source和target中的字段进行"`挑选`"，也就是source和target中要映射的两个字段不必在同一层级，并且source和target在某一层级字段的数量也不必相同。这同样是通过指定@Mapping中的source类型和target类型完成，比如：@Mapping(target="ornament", source="interior.ornament") 和 @Mapping(target="material.materialType", source="material")。

当source和target的路径有相同的部分时，也能完成映射。比如：Quality映射到QualityDto的过程中，所有名字相同的字段都会被映射过去；同样地，Report中的所有字段除了一个例外，也会被映射到ReportDto中，这个例外就是OrganisationDto中的organisation字段（因为source层级中没有对应的字段）。也就是说，只有name字段需要从Report中的organisationName字段取值，可以描述为：@Mapping(target="quality.report.organisation.name", source="quality.report.organisationName")。

回到一开始的例子：如果kind和type本身就是bean会怎么样？此时，MapStruct会再生成一个方法来继续映射，比如：

----
@Mapper
public interface FishTankMapperWithDocument {

    @Mapping(target = "fish.kind", source = "fish.type")
    @Mapping(target = "fish.name", expression = "java(\"Jaws\")")
    @Mapping(target = "plant", ignore = true )
    @Mapping(target = "ornament", ignore = true )
    @Mapping(target = "material", ignore = true)
    @Mapping(target = "quality.document", source = "quality.report")
    @Mapping(target = "quality.document.organisation.name", constant = "NoIdeaInc" )
    FishTankWithNestedDocumentDto map( FishTank source );
}
----

请注意@Mapping(target="quality.document", source="quality.report")。target中的DocumentDto是由Report映射得来，MapStruct 会这条规则中得到指引关于名称的引导信息，从而生成的相应映射代码。映射规则中甚至可以包括常量和表达式，我们来看下最后一个例子：@Mapping(target="quality.document.organisation.name", constant="NoIdeaInc")。

MapStruct会对source中的每个嵌套字段加一个null判断。

* 我们鼓励用户显式地写自己的嵌套方法，而不是通过父方法来配置一切。手写嵌套映射可以把映射过程保留下来（也就是一个方法），这样就能在多个地方复用该方法，不然用户就需要在每个需要嵌套映射的上层方法里重复配置相同的东西。
* 在一些场景中，ReportingPolicy会被设定为IGNORE，这条策略适用于生成嵌套方法时。那么当MapStruct在嵌套映射中找不到对应的target字段时，可能不会有任何日志报警。

=== 调用自定义映射方法

有时候，并不是直接映射就可以，有一些字段需要经过自定义的逻辑计算得到。

下面的例子展示了FishTank类中的length, width和height字段是如何从FishTankWithVolumeDto类中的VolumeDto中映射来的。 VolumeDto包含volume和description字段。 自定义逻辑包含在mapVolume方法中，该方法以FishTank为入参，以VolumeDto为出参。MapStruct生成的代码会调用自定义方法mapVolume，来完成FishTank对象到target字段volume的映射。

其余的字段可以以常规的方式玩车个表格映射:使用@Mapping注释。

----
public class FishTank {
    Fish fish;
    String material;
    Quality quality;
    int length;
    int width;
    int height;
}

public class FishTankWithVolumeDto {
    FishDto fish;
    MaterialDto material;
    QualityDto quality;
    VolumeDto volume;
}

public class VolumeDto {
    int volume;
    String description;
}

@Mapper
public abstract class FishTankMapperWithVolume {

    @Mapping(target = "fish.kind", source = "source.fish.type")
    @Mapping(target = "material.materialType", source = "source.material")
    @Mapping(target = "quality.document", source = "source.quality.report")
    @Mapping(target = "volume", source = "source")
    abstract FishTankWithVolumeDto map(FishTank source);

    VolumeDto mapVolume(FishTank source) {
        int volume = source.length * source.width * source.height;
        String desc = volume < 100 ? "Small" : "Large";
        return new VolumeDto(volume, desc);
    }
}
----

请注意，@Mapping注解中的source类型是"`source`"，这是指"`map`"方法的参数的名字是sourse，而不是指FishTank类中名字是"`source`"的一个字段。

=== 调用其他mapper

除了调用本身就在mapper类中定义的方法外，MapStruct还能调用定义在其他类中的方法（MapStruct生成的其他mapper的方法，或者手写的映射方法）。这个功能十分有用，比如您可能想在几个不同类间构造映射代码（比如应用中每个模块都有一个mapper），或者您想实现MapStruct无法生成的自定义映射逻辑。

比如，Car类有一个manufacturingDate字段，DTO类中对应的字段是String类型。您可能会实现一个如下的Mapper类：

----
public class DateMapper {

    public String asString(Date date) {
        return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
            .format( date ) : null;
    }

    public Date asDate(String date) {
        try {
            return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
                .parse( date ) : null;
        }
        catch ( ParseException e ) {
            throw new RuntimeException( e );
        }
    }
}
----

而引用了DateMapper类的CarMapper接口需要使用@Mapper注解，例子如下： @Mapper(uses=DateMapper.class) public interface CarMapper {     CarDto carToCarDto(Car car);
} 当生成carToCarDto()的实现代码时，MapStruct 会寻找能把Date对象映射为String的方法，在DateMapper类中找到时会调用asString()方法完成manufacturingDate字段的映射。

生成的mapper会通过配置的组件模式来检索被引用的mapper。比如：如果CarMapper采用CDI作为组件模式，DateMapper就必须是一个CDI bean。当使用默认的组件模式时，所有需要被MapStruct检索的手写mapper类都必须有一个public的无参数构造器，以此来完成实例化。

=== 把映射target类型传递给自定义mappers

当使用@Mapper#uses()把自定义的mapper加载到生成的mapper中时，自定义映射方法里的mapper方法可以加一个Class类型的参数，该参数可以对具体的target对象类型做通用映射。 该参数必须加上@TargetType注解，这样MapStruct才能把target bean中对应的Class实例传进去。

举个例子，CarDto有一个Reference类型的字段owner，该字段中有Person实体的主键。您可以创建一个通用的自定义映射，来把所有Reference类型的对象映射为他们对应的JPA实体的实例：

----
@ApplicationScoped // CDI component model
public class ReferenceMapper {

    @PersistenceContext
    private EntityManager entityManager;

    public <T extends BaseEntity> T resolve(Reference reference, @TargetType Class<T> entityClass) {
        return reference != null ? entityManager.find( entityClass, reference.getPk() ) : null;
    }

    public Reference toReference(BaseEntity entity) {
        return entity != null ? new Reference( entity.getPk() ) : null;
    }
}

@Mapper(componentModel = MappingConstants.ComponentModel.CDI, uses = ReferenceMapper.class )
public interface CarMapper {

    Car carDtoToCar(CarDto carDto);
}
----

MapStruct会生成如下代码：

----
//GENERATED CODE
@ApplicationScoped
public class CarMapperImpl implements CarMapper {

    @Inject
    private ReferenceMapper referenceMapper;

    @Override
    public Car carDtoToCar(CarDto carDto) {
        if ( carDto == null ) {
            return null;
        }

        Car car = new Car();

        car.setOwner( referenceMapper.resolve( carDto.getOwner(), Owner.class ) );
        // ...

        return car;
    }
}
----

=== 把上下文或者状态传给自定义方法

您可以通过@Context参数把额外的上下文/状态信息从生成的映射方法传进自定义方法中。 当合适的时候，其他映射方法也能用这种参数，如@ObjectFactory方法（参见第九节）或者@BeforeMapping / @AfterMapping方法（参见12.2节）。

MapStruct会搜索@Context参数中的@ObjectFactory方法，当合适时，该方法会调用提供的上下文参数值。

MapStruct也会搜索@Context参数中的@BeforeMapping/@AfterMapping方法，当合适时，该方法会调用提供的上下文参数值。

注意：上下文参数在映射方法执行前后处调用时，不会有null值校验。请调用者自己确保上下文参数不为null值。

为了能让生成的代码能调用有@Context参数的方法，映射方法的定义中也需要有@Context参数。如果没传@Context参数，生成的代码对该参数不会创建新的实例，也不会传null。

----
public abstract CarDto toCar(Car car, @Context Locale translationLocale);

protected OwnerManualDto translateOwnerManual(OwnerManual ownerManual, @Context Locale locale) {
    // manually implemented logic to translate the OwnerManual with the given Locale
}
----

MapStruct会生成如下代码：

----
//GENERATED CODE
public CarDto toCar(Car car, Locale translationLocale) {
    if ( car == null ) {
        return null;
    }

    CarDto carDto = new CarDto();

    carDto.setOwnerManual( translateOwnerManual( car.getOwnerManual(), translationLocale );
    // more generated mapping code

    return carDto;
}
----

=== 映射方法的解析

当把一个字段从一种类型映射为另一种类型时，MapStruct会找最特化的方法，也就是source type和target type都符合的方法。 这个方法可以在当前的mapper类中声明，也可以在其他mapper类中声明后由@Mapper#uses()注册到当前mapper类中。这同样适合工厂方法（参见第九节）。

查找映射或工厂方法的算法与Java的方法解析算法十分相似。特别是，具有source类型更特化的方法优先级更高(如果有两个方法，一个方法以source类型本身做参数，另一个以source类型的父类做参数)。如果有多个最特化的方法，MapStruct会抛出错误异常。

* 当使用JAXB时，即比如把String映射为对应的JAXBElement+++<String>+++，MapStruct在寻找映射方法时，会参考@XmlElementDecl注解中的scope和name属性。这保证了创建的JAXBElement实例会有正确的QNAME值。您可以在 [这里](https://github.com/mapstruct/mapstruct/blob/1.5.2.Final/integrationtest/src/test/resources/jaxbTest/src/test/java/org/mapstruct/itest/jaxb/JaxbBasedMapperTest.java)找到JAXB对象的映射测试例子。+++</String>+++

=== 通过qualifier选择映射方法

在很多场合中，您可能会需要很多具有相同方法签名但是映射行为不同的映射方法（一般来说您会在名称上区分这些方法）。MapStruct有一种手工机制来处理这种情况：@Qualifier (org.mapstruct.Qualifier)。"`qualifier`"是用户的一个自定义注解，会 "`挂载`"在mapper类中的映射方法上，并且可以在bean属性映射、迭代映射和map映射中被引用。多个qualifer可以"`挂载`"在一个方法和映射上。

假设有一个手写的映射方法，该方法的业务作用是翻译，所以这个方法的参数是String类型，返回值也是String类型，并且该方法所在类中还有很多其他String-String型的参数签名：

----
public class Titles {

    public String translateTitleEG(String title) {
        // some mapping logic
    }

    public String translateTitleGE(String title) {
        // some mapping logic
    }
}
----

有一个mapper会使用这个手写mapper，并且source属性中有一个"`title`"字段需要映射：

----
@Mapper( uses = Titles.class )
public interface MovieMapper {

     GermanRelease toGerman( OriginalRelease movies );

}
----

如果不用qualifier，您会得到一个映射方法模糊的报错，因为MapStruct找到了两个满足条件的映射方法（translateTitleEG, translateTitleGE），MapStruct在没有提示的情况下不知道到底选择哪一个。

让我们走进qualifier方法：

----
import org.mapstruct.Qualifier;

@Qualifier
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.CLASS)
public @interface TitleTranslator {
}
----

当我们想指明用哪个翻译的时候：

----
import org.mapstruct.Qualifier;

@Qualifier
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.CLASS)
public @interface EnglishToGerman {
}
----

----
import org.mapstruct.Qualifier;

@Qualifier
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.CLASS)
public @interface GermanToEnglish {
}
----

请注意，TitleTranslator是TYPE级别的，而GermanToEnglish是METHOD级别的。

使用了这些qualifier的映射例子如下：

----
@Mapper( uses = Titles.class )
public interface MovieMapper {

     @Mapping( target = "title", qualifiedBy = { TitleTranslator.class, EnglishToGerman.class } )
     GermanRelease toGerman( OriginalRelease movies );

}
----

----
@TitleTranslator
public class Titles {

    @EnglishToGerman
    public String translateTitleEG(String title) {
        // some mapping logic
    }

    @GermanToEnglish
    public String translateTitleGE(String title) {
        // some mapping logic
    }
}
----

* 请确保@Retention注解的策略是CLASS（即@Retention(RetentionPolicy.CLASS)）
* 您必须在mapping中使用qualifiedBy元素，才能让有qualifier注解的类/方法生效。
* 同样的机制也适用于beam映射：@BeanMapping#qualifiedBy。您可以通过指定qualifier选择工厂方法。

在许多场合中，用户想完成的事情相对简答，而声明一个新注解无疑是很重的一个方式。这种情况下，您可以使用MapStruct的@Name注解。该注解是一个预定义的qualifier（本身包含@Qualifier注解），可以用来给Mapper类或者映射方法命名。请看下面的例子：

----
@Named("TitleTranslator")
public class Titles {

    @Named("EnglishToGerman")
    public String translateTitleEG(String title) {
        // some mapping logic
    }

    @Named("GermanToEnglish")
    public String translateTitleGE(String title) {
        // some mapping logic
    }
}
----

----
@Mapper( uses = Titles.class )
public interface MovieMapper {

     @Mapping( target = "title", qualifiedByName = { "TitleTranslator", "EnglishToGerman" } )
     GermanRelease toGerman( OriginalRelease movies );

}
----

* 尽管使用方式是一样的，但是用户应该更小心一点。对于改名的需求，如果用qualifier的方式，您可以用IDE整洁地把代码里所有该注解出现的地方一并都改了，但是用@Named的方式显然做不到这一点。

=== 在qualifier与默认值

请注意，Mapping#defaultValue本质上是个String，需要被转换为Mapping#target。提供Mapping#qualifiedByName 或者 Mapping#qualifiedBy会强制让MapStruct使用该方法。如果您希望Mapping#defaultValue有不同的行为，请提供合适的映射方法。该映射方法需要把String转换为Mapping#target期望的类型，同时该方法也需要被注解环绕来让Mapping#qualifiedByName 或者 Mapping#qualifiedBy注解能发现。

使用默认值的mapper的例子如下：

----
@Mapper
public interface MovieMapper {

     @Mapping( target = "category", qualifiedByName = "CategoryToString", defaultValue = "DEFAULT" )
     GermanRelease toGerman( OriginalRelease movies );

     @Named("CategoryToString")
     default String defaultValueForQualifier(Category cat) {
         // some mapping logic
     }
}
----

在上面的例子中，如果category是null，MapStruct会调用CategoryToString( Enum.valueOf( Category.class, "DEFAULT" ) )方法，并且将结果塞到category字段中。

同时使用默认值和默认方法的mapper的例子如下：

----
@Mapper
public interface MovieMapper {

     @Mapping( target = "category", qualifiedByName = "CategoryToString", defaultValue = "Unknown" )
     GermanRelease toGerman( OriginalRelease movies );

     @Named("CategoryToString")
     default String defaultValueForQualifier(Category cat) {
         // some mapping logic
     }

     @Named("CategoryToString")
     default String defaultValueForQualifier(String value) {
         return value;
     }
}
----

在上面的例子中，如果category是null，MapStruct会调用defaultValueForQualifier( "Unknown" )方法，并且将结果塞到category字段中。

如果上述方法没起作用，您还可以选择使用defaultExpression来设置默认值，例子如下：

----
@Mapper
public interface MovieMapper {

     @Mapping( target = "category", qualifiedByName = "CategoryToString", defaultExpression = "java(\"Unknown\")" )
     GermanRelease toGerman( OriginalRelease movies );

     @Named("CategoryToString")
     default String defaultValueForQualifier(Category cat) {
         // some mapping logic
     }
}
----
