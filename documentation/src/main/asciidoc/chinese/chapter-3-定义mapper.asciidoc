[[定义一个mapper]]
== 定义一个mapper

在本节中，您将学会如何用MapStruct定义一个bean mapper，以及在其中可以有哪些选择。

=== 基本映射

创建一个mapper类很简单，仅需简单定义一个Java接口，加上需要的映射方法，并在接口上加上org.mapstruct.Mapper注解就可以：

----
@Mapper
public interface CarMapper {

    @Mapping(source = "make", target = "manufacturer")
    @Mapping(source = "numberOfSeats", target = "seatCount")
    CarDto carToCarDto(Car car);

    @Mapping(source = "name", target = "fullName")
    PersonDto personToPersonDto(Person person);
}
----

在构建期，`@Mapper` 注解会触发MapStruct代码生成器，从而生成CarMapper接口的实现类。

在生成的方法实现中，所有source类（比如Car）的可读字段，都会被复制到target类（比如CarDto）中的对应字段：

* 当字段名称与target类中对应字段的名称一致时，映射会是隐式的
* 当字段名称与target类中对应字段的名称不一致时，可以通过@Mapping注解来完成映射。
+
____
在@mapping注解中，字段名（要求符合 https://www.oracle.com/java/technologies/javase/javabeans-spec.html[java bean规范]）必须被指定。如上例中有getSeatCount() 和 setSeatCount()方法的seatCount字段。
____

____
通过指定@BeanMapping(ignoreByDefault = true)，默认行为会变成"`显式映射`"。即所有映射都需要通过@Mapping方式指定，并且没映射到的target字段也不会有warning信息。
____

____
支持链式setter。链式setter就是返回值类型和修改值类型一致的setter，如：

----
public Builder seatCount(int seatCount) {
    this.seatCount = seatCount;
    return this;
}
----
____

为了更好地明白MapStruct做了什么，我们可以看一下MapStruct生成的carToCarDto()实现：

----
// GENERATED CODE
public class CarMapperImpl implements CarMapper {

    @Override
    public CarDto carToCarDto(Car car) {
        if ( car == null ) {
            return null;
        }

        CarDto carDto = new CarDto();

        if ( car.getFeatures() != null ) {
            carDto.setFeatures( new ArrayList<String>( car.getFeatures() ) );
        }
        carDto.setManufacturer( car.getMake() );
        carDto.setSeatCount( car.getNumberOfSeats() );
        carDto.setDriver( personToPersonDto( car.getDriver() ) );
        carDto.setPrice( String.valueOf( car.getPrice() ) );
        if ( car.getCategory() != null ) {
            carDto.setCategory( car.getCategory().toString() );
        }
        carDto.setEngine( engineToEngineDto( car.getEngine() ) );

        return carDto;
    }

    @Override
    public PersonDto personToPersonDto(Person person) {
        //...
    }

    private EngineDto engineToEngineDto(Engine engine) {
        if ( engine == null ) {
            return null;
        }

        EngineDto engineDto = new EngineDto();

        engineDto.setHorsePower(engine.getHorsePower());
        engineDto.setFuel(engine.getFuel());

        return engineDto;
    }
}
----

MapStruct生成代码的哲学是：尽量让生成的代码和手写的代码一样。具体来讲，值从source到target的复制由普通的getter/setter方法调用完成而不是通过反射或类似的其他方式。

刚才的例子展示了一件事，@Mapping指定的所有名称映射会反应到生成的代码中。如果source实体和target实体中要映射的字段类型不一样时，MapStruct会执行以下两个行为中的一个：1.自动类型转换（例如上例中的 price 字段，更详细的内容参见<<51-隐式类型转换,隐式类型转换>> 2.选择性地调用或创建另一个映射方法（例如上例中的driver / engine 字段，更详细的内容参见<<52-对象引用的映射,对象引用的映射>>）。另外当且仅当以下条件得到满足时，MapStruct才会创建另一个新的映射方法：1.
source字段和target字段都是一个Bean中的字段。2.
source字段和target字段本身是Bean或简单字段（即不是Collection或者Map类型）

字段是集合类型时：

. source和target字段是元素类型相同的集合，则映射就是创建一个包含source全部实例的target类型的集合实例。
. source和target字段是元素类型不同的集合，则每个source元素都会先被独立映射为target元素，之后再添加到target集合中（参见<<6集合的映射,对象引用的映射>>）

MapStruct会考虑source类和target类中的所有公共字段，并包括其父类中的字段。

=== Mapping Composition (experimental)

MapStruct支持元注解。

@Mapping注解的@Target（译注：即作用范围），不仅支持支持ElementType#METHOD（译注：即方法），还支持ElementType#ANNOTATION_TYPE（译注：即注解）。这允许@Mapping在用户自定义的其他注解上使用，以达到复用的目的，比如：

----
@Retention(RetentionPolicy.CLASS)
@Mapping(target = "id", ignore = true)
@Mapping(target = "creationDate", expression = "java(new java.util.Date())")
@Mapping(target = "name", source = "groupName")
public @interface ToEntity { }
----

@ToEntity所添加的需要有一些共同特征，但是这些类不需要有一个公共基类。举个例子，下面StorageMapper中，ShelveEntity和BoxEntity并没有同一个基类。

----
@Mapper
public interface StorageMapper {

    StorageMapper INSTANCE = Mappers.getMapper( StorageMapper.class );

    @ToEntity
    @Mapping( target = "weightLimit", source = "maxWeight")
    ShelveEntity map(ShelveDto source);

    @ToEntity
    @Mapping( target = "label", source = "designation")
    BoxEntity map(BoxDto source);
}
----

但是，ShelveEntity和BoxEntity确实有一些公共字段。@ToEntity假定ShelveEntity和BoxEntity都拥有字段："id", "creationDate" 和 "name"。其进一步假定source bean ShelveDto 和 BoxDto 都有"groupName"字段。此概念也被人称为"`鸭子类型`"，如果一个东西叫起来像鸭子，走起来像鸭子，那它可以当鸭子对待。

该特性依然是实验特性。错误信息还没有成熟：出问题的方法以及@Mapping注解中的相关值都会显示出来，但是，组合的切面是不可见的。错误消息对应的情况就像是@Mapping是直接在相关的方法上一样。因此，用户应该小心使用该特性，特别是在不确定一个字段是否会始终存在的情况下。

一个更加类型安全（但也更繁琐）的方式是：在target bean和source bean上定义基类/接口，并且使用@InheritConfiguration达到相同的结果（请参见参见<<111-继承映射配置,继承映射配置>>）

=== 给mapper添加自定义方法

在某些场景下，您需要手动实现一些MapStruct不能自动生成的特定映射。一种方法是在另一个类里手动实现自定义的映射方法，之后再使MapStruct生成的mapper类调用这个方法（参见<<55-调用其他mapper,调用其他mapper>>）。

而如果您用的是java8或者更高的版本，您可以直接在mapper接口中实现自定义的方法（即default方法）作为代替。如果参数的类型和返回值的类型与default方法匹配，MapStruct生成的代码会自动调用default方法。

我们可以看个例子，有一个把 Person 映射到 PersonDto 的需求，里面有一些特殊逻辑，不能用MapStruct自动生成对应代码。您可以这样定义这个mapper：

----
@Mapper
public interface CarMapper {

    @Mapping(...)
    ...
    CarDto carToCarDto(Car car);

    default PersonDto personToPersonDto(Person person) {
        //hand-written mapping logic
    }
}
----

MapStruct代码生成器会生成carToCarDto()方法的实现。当其中需要映射driver字段时，MapStruct会调用我们手动实现的personToPersonDto()方法生成代码。

一个mapper也可以不定义成一个接口，而定义成一个抽象类并在里面实现自定义方法。在这种情况下，MapStruct会生成抽象类的子类，并实现所有的抽象方法。这种方式相较于声明接口+default方法的一个优势是类中可以声明额外的变量字段。

所以，刚才把 Person 映射到 PersonDto 的例子也可以这样写：

----
@Mapper
public abstract class CarMapper {

    @Mapping(...)
    ...
    public abstract CarDto carToCarDto(Car car);

    public PersonDto personToPersonDto(Person person) {
        //hand-written mapping logic
    }
}
----

MapStruct会生成CarMapper的子类，里面会有carToCarDto()方法的实现（因为该方法被声明为抽象方法）。而carToCarDto()的实现中会调用我们手动实现的personToPersonDto()方法。

=== 带有多个source参数的映射方法

MapStruct也支持带有多个source参数的映射方法。因此您可以把多个实体组合成一个目标对象。

例子如下：

----
@Mapper
public interface AddressMapper {

    @Mapping(target = "description", source = "person.description")
    @Mapping(target = "houseNumber", source = "address.houseNo")
    DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Address address);
}
----

上例中的映射方法把两个source对象映射成了一个target对象。和单参数映射方法一样，字段是通过名字映射的。

如果这多个source参数里有字段名称冲突(重复)的，则必须使用@Mapping注解指明字段来源自哪个参数，如上例中的description。当有冲突问题未解决时，在编译时则会报错。 至于名字不冲突的字段，则无需指明来源。

* 当使用@Mapping注解的时候，必须指定字段来源自哪个参数（译注：仅针对多参数映射的情况）
* 仅当所有source参数都是null时，多参数mapping方法才返回null。不然target对象就会被实例化，并且按照提供的参数塞字段进去。

您也可以直接指向source参数，例子如下：

----
@Mapper
public interface AddressMapper {

    @Mapping(target = "description", source = "person.description")
    @Mapping(target = "houseNumber", source = "hn")
    DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Integer hn);
}
----

这个例子里，source参数被直接映射进了target对象中，即参数hn（一个非bean类型，这里是java.lang.Integer）被映射为了houseNumber。

=== 把嵌套bean的属性映射到target对象中

如果您不想显式地为所有来自嵌套source bean的字段指定名称，您可以用"`.`"作为target。这会让MapStruct把source bean中的每个属性都映射到target对象中。例子如下：

----
@Mapper
 public interface CustomerMapper {

     @Mapping( target = "name", source = "record.name" )
     @Mapping( target = ".", source = "record" )
     @Mapping( target = ".", source = "account" )
     Customer customerDtoToCustomer(CustomerDto customerDto);
 }
----

生成的代码会把CustomerDto.record里面的每个属性都直接映射到Customer里，您也就无需手动进行名称指定，Customer.account也是如此。

如果有冲突，您可以通过显式指定mapping来解决。举个例子，假设上例中的CustomerDto.record和CustomerDto.account都有字段name，则您可以通过指定@Mapping( target = "name", source = "record.name" ) 来解决这个冲突。

这个"`target this`"的概念在把有层级结构的对象在映射中打平时特别有用，相反的情形也是一样(@InheritInverseConfiguration)。

=== 更新已经存在的bean实例

在一些场景中，您的需求不是创建一个新的target实例，而是更新一个已经存在的target实例。

您可以这样实现此类映射：1.把target对象添加为参数 2.
给该参数添加@MappingTarget注解。

例子如下：

----
@Mapper
public interface CarMapper {

    void updateCarFromDto(CarDto carDto, @MappingTarget Car car);
}
----

在updateCarFromDto()的方法实现中，会用CarDto对象中的字段去更新传进去的Car实例。 这里只有一个参数被标记为映射target。

您也可以把target参数的类型当作返回值类型，而不是void。这样生成的方法实现中会把传进来target实例更新并返回。这种方式可以允许映射方法进行链式调用。

当使用CollectionMappingStrategy.ACCESSOR_ONLY 标签时，target bean中集合/map类型的字段会先被清空，之后再塞进来自source的对应集合/map字段的元素。 当使用CollectionMappingStrategy.ADDER_PREFERRED或者CollectionMappingStrategy.TARGET_IMMUTABLE标签时，target字段不会被清空，而是直接塞元素进去。

=== 使用直接字段访问的映射

MapStruct也支持没有getters/setters方法的public字段的映射。 当找不到某字段的getter/setter时，MapStruct会直接使用该字段作为读/写的访问器（accessor）。

当一个字段被标为public或者public final时，该字段会被认为是一个读访问器。当一个字段被标为static时，该字段就不再被当成读访问器。

仅当一个字段被标为public时，该字段会被认为是一个读访问器。当一个字段被标为 final或static时，该字段就不再被当成读访问器。

来个小例子：

----
public class Customer {

    private Long id;
    private String name;

    //getters and setter omitted for brevity
}

public class CustomerDto {

    public Long id;
    public String customerName;
}

@Mapper
public interface CustomerMapper {

    CustomerMapper INSTANCE = Mappers.getMapper( CustomerMapper.class );

    @Mapping(target = "name", source = "customerName")
    Customer toCustomer(CustomerDto customerDto);

    @InheritInverseConfiguration
    CustomerDto fromCustomer(Customer customer);
}
----

生成的对应mapper如下：

----
// GENERATED CODE
public class CustomerMapperImpl implements CustomerMapper {

    @Override
    public Customer toCustomer(CustomerDto customerDto) {
        // ...
        customer.setId( customerDto.id );
        customer.setName( customerDto.customerName );
        // ...
    }

    @Override
    public CustomerDto fromCustomer(Customer customer) {
        // ...
        customerDto.id = customer.getId();
        customerDto.customerName = customer.getName();
        // ...
    }
}
----

完整的例子见于github上的 https://github.com/mapstruct/mapstruct-examples/tree/master/mapstruct-field-mapping[mapstruct-examples-field-mapping]工程。

=== 使用builder

MapStruct也支持通过builder来对不可变类型进行映射。 当执行映射时，MapStruct会检查被映射的类型是否有builder，这通过BuilderProviderSPI完成。如果该类型确实存在Builder，则该Builder会在mapping中使用。

默认的BuilderProvider实现采用如下假设：

* 该类应有一个无参的puglic static的builder创建方法，该方法的返回值即是该类builder。举例来讲，假设有一个符合该标准Person类，那么它就应该有一个返回PersonBuilder的public static的方法。
* 该builder类应有一个这样的无参的public方法，该方法的返回值是被构建的类型。举例来讲，PersonBuilder中就有一个返回Person的方法。
* 如果有多个build方法，MapStruct会寻找有没有一个名字就叫"`build`"的方法，如果有，那么MapStruct就会采用该方法，否则就会在编译时报错。
* 一个具体的build方法可以通过在@BeanMapping, @Mapper和@MapperConfig注解中使用@Builder实现。
* 如果有多个满足上面条件的builder创建方法，那么DefaultBuilderProvider SPI会抛出MoreThanOneBuilderCreationMethodException异常。MapStruct会捕获这个异常，并且在编译时抛出warn并且不用任何builder。

当MapStruct发现了该类确实满足条件后，MapStruct 生成的代码就会调用builder的build方法来完成映射。

* 对builder的探测可以通过@Builder#disableBuilder关闭。当builder被禁用后，MapStruct会使用一般的getters / setters
* <<9-对象工厂,对象工厂>>也被认为是builder模式。比如，如果一个object factory中有PersonBuilder，那么这个工厂就会替代builder创建方法而被使用。
* 被探测到的builder会影响@BeforeMapping 和 @AfterMapping注解的行为，更多请参见<<122-带before-mapping和after-mapping方法的映射自定义,带before-mapping和after-mapping方法的映射自定义>>。

带builder的Person类例子如下：

----
public class Person {

    private final String name;

    protected Person(Person.Builder builder) {
        this.name = builder.name;
    }

    public static Person.Builder builder() {
        return new Person.Builder();
    }

    public static class Builder {

        private String name;

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Person create() {
            return new Person( this );
        }
    }
}
----

对应的mapper例子如下：

----
public interface PersonMapper {

    Person map(PersonDto dto);
}
----

MapStruct生成的代码如下：

----
// GENERATED CODE
public class PersonMapperImpl implements PersonMapper {

    public Person map(PersonDto dto) {
        if (dto == null) {
            return null;
        }

        Person.Builder builder = Person.builder();

        builder.name( dto.getName() );

        return builder.create();
    }
}
----

支持builder的框架：

. https://projectlombok.org/[Lombok] - 您需要在一个独立模块中引入Lombok类。更多信息参见https://github.com/projectlombok/lombok/issues/1538[rzwitserloot/lombok#1538]，同时请参考<<142-lombok,lombok>>)。（译注：lombok和mapstruct都是通过修改字节码的方式实现功能，有一定的冲突问题，需要额外配置来解决冲突）
. https://github.com/google/auto/blob/master/value/userguide/index.md[AutoValue]
. https://immutables.github.io/[Immutables] - 当Immutables出现在注解处理器的路径上时，ImmutablesAccessorNamingStrategy 和 ImmutablesBuilderProvider 会被用作默认方法。
. https://github.com/inferred/FreeBuilder[FreeBuilder] - 当FreeBuilder出现在注解处理器的路径上时，FreeBuilderAccessorNamingStrategy 会被用作默认方法。当使用FreeBuilder时，JavaBean 规范应当被遵守，不然MapStruct会认不出来流式getter。
. 自定义builder（手写的）也适用，只要满足默认BuilderProvider的规则。不然，您就要写一个自定义的BuilderProvider。

如果您想要关闭builder，您可以把MapStruct处理器选项mapstruct.disableBuilders传给编译器，例如-Amapstruct.disableBuilders=true。

=== 使用构造器

MapStruct支持使用构造器来构建target类型。在映射过程中，MapStruct会检查被映射类是否有builder，如果没有，则MapStruct会找该类的一个构造器。如果该类有多个构造器，则MapStruct会按照下列方式挑选哪一个构造器应该被使用：

* 如果一个构造器上有注解@Default注解（来自任何包都可以，参见14.1），则该构造器会被采用。
* 如果仅有一个public的构造器，则该构造器会被采用，其他非public构造器会被忽略。
* 如果一个无参构造器存在，则该构造器会被采用，其他构造器会被忽略。
* 如果有多个符合标准的构造器，那么编译时会抛出未指明构造器的异常。此时，可以用@Default注解（来自任何包都可以，参见14.1）解决该问题。

例子如下：

----
public class Vehicle {

    protected Vehicle() { }

    // MapStruct will use this constructor, because it is a single public constructor
    public Vehicle(String color) { }
}

public class Car {

    // MapStruct will use this constructor, because it is a parameterless empty constructor
    public Car() { }

    public Car(String make, String color) { }
}

public class Truck {

    public Truck() { }

    // MapStruct will use this constructor, because it is annotated with @Default
    @Default
    public Truck(String make, String color) { }
}

public class Van {

    // There will be a compilation error when using this class because MapStruct cannot pick a constructor

    public Van(String make) { }

    public Van(String make, String color) { }

}
----

当使用构造函数时，将使用构造函数参数的名称来匹配target字段。当该构造器有@ConstructorProperties注解时（来自任何包都可以，参见<<141-non-shipped注解,non-shipped注解>>），那么将使用这个注释获取参数的名称。

* 当存在一个object factory方法或者一个有@ObjectFactory注解的方法，该方法会比target类中所有构造器的优先级更高。此时target对象的构造器不会被使用。

多参数构造器类例子：

----
public class Person {

    private final String name;
    private final String surname;

    public Person(String name, String surname) {
        this.name = name;
        this.surname = surname;
    }
}
----

对应的mapper例子：

----
public interface PersonMapper {

    Person map(PersonDto dto);
}
----

mapper的生成代码

----
// GENERATED CODE
public class PersonMapperImpl implements PersonMapper {

    public Person map(PersonDto dto) {
        if (dto == null) {
            return null;
        }

        String name;
        String surname;
        name = dto.getName();
        surname = dto.getSurname();

        Person person = new Person( name, surname );

        return person;
    }
}
----

=== 将Map映射为Bean

有时候，您想要将Map<String, ???>映射为具体的bean。 MapStruct可以提供上述场景所需的映射能力：使用target bean字段（或者通过Mapping#source定义）来将map中的values抽出以完成映射。

例子如下：

----
public class Customer {

    private Long id;
    private String name;

    //getters and setter omitted for brevity
}

@Mapper
public interface CustomerMapper {

    @Mapping(target = "name", source = "customerName")
    Customer toCustomer(Map<String, String> map);

}
----

----
// GENERATED CODE
public class CustomerMapperImpl implements CustomerMapper {

    @Override
    public Customer toCustomer(Map<String, String> map) {
        // ...
        if ( map.containsKey( "id" ) ) {
            customer.setId( Integer.parseInt( map.get( "id" ) ) );
        }
        if ( map.containsKey( "customerName" ) ) {
            customer.setName( map.get( "customerName" ) );
        }
        // ...
    }
}
----

* 所有之前提到过的规则，如在不同类型之间映射的规则；通过Mapper#uses使用其他mapper的方式；mapper中的自定义方法等等，此处都同样使用。举例来讲，您可以将Map<String, Integer> 映射为一个Bean，但是每个字段都需要一个从Integer类型转换为target中对应字段类型的类型转换。
* 当使用一个raw map(译注：即不使用泛型的map)或者不使用String作为key的map时，MapStruct会生成一个warning。但是如果该map直接被映射为target字段，则不会生成该warning。
