[[using-spi]]
== 使用MapStruct SPI

为了使用自定义的SPI实现，必须在 `META-INF/services/` 中能以全称定位到你的自定义实现，即一个独立的jar文件，且该文件以SPI命名（比如 `org.mapstruct.ap.spi.AccessorNamingStrategy`），文件内容为自定义类的全路径（比如 `org.mapstruct.example.CustomAccessorNamingStrategy`）。这个jar文件需要被添加到注解处理器的路径里（即，在您添加 mapstruct-processor jar的位置之后添加该文件）。

[NOTE]
====
有可能需要将该jar包添加到您的IDE注解处理器工厂路径里。不然的话，当运行您的调用工具成功时，如果找不到该包那么您会收到一个报错。
====

=== 自定义Accessor命名策略

SPI 名称: `org.mapstruct.ap.spi.AccessorNamingStrategy`

MapStruct通过Service Provider Interface (SPI)提供覆盖 `AccessorNamingStrategy` 的能力。下方是一个很好的例子，展示了source object `GolfPlayer` 和 `GolfPlayerDto` 的流式API。

.Source object GolfPlayer with fluent API.
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class GolfPlayer {

    private double handicap;
    private String name;

    public double handicap() {
        return handicap;
    }

    public GolfPlayer withHandicap(double handicap) {
        this.handicap = handicap;
        return this;
    }

    public String name() {
        return name;
    }

    public GolfPlayer withName(String name) {
        this.name = name;
        return this;
    }
}
----
====

.Source object GolfPlayerDto with fluent API.
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class GolfPlayerDto {

    private double handicap;
    private String name;

    public double handicap() {
        return handicap;
    }

    public GolfPlayerDto withHandicap(double handicap) {
        this.handicap = handicap;
        return this;
    }

    public String name() {
        return name;
    }

    public GolfPlayerDto withName(String name) {
        this.name = name;
        return this;
    }
}
----
====

我们希望 `GolfPlayer` 被映射为 `GolfPlayerDto` 的方式如下：

.Source object with fluent API.
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
@Mapper
public interface GolfPlayerMapper {

    GolfPlayerMapper INSTANCE = Mappers.getMapper( GolfPlayerMapper.class );

    GolfPlayerDto toDto(GolfPlayer player);

    GolfPlayer toPlayer(GolfPlayerDto player);

}
----
====

这可以通过实现SPI `org.mapstruct.ap.spi.AccessorNamingStrategy` 来完成，就像下例子中展示的一样。

.CustomAccessorNamingStrategy
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
/**
 * A custom {@link AccessorNamingStrategy} recognizing getters in the form of {@code property()} and setters in the
 * form of {@code withProperty(value)}.
 */
public class CustomAccessorNamingStrategy extends DefaultAccessorNamingStrategy {

    @Override
    public boolean isGetterMethod(ExecutableElement method) {
        String methodName = method.getSimpleName().toString();
        return !methodName.startsWith( "with" ) && method.getReturnType().getKind() != TypeKind.VOID;
    }

    @Override
    public boolean isSetterMethod(ExecutableElement method) {
        String methodName = method.getSimpleName().toString();
        return methodName.startsWith( "with" ) && methodName.length() > 4;
    }

    @Override
    public String getPropertyName(ExecutableElement getterOrSetterMethod) {
        String methodName = getterOrSetterMethod.getSimpleName().toString();
        return IntrospectorUtils.decapitalize( methodName.startsWith( "with" ) ? methodName.substring(  4 ) : methodName );
    }
}
----
====
`CustomAccessorNamingStrategy` 使用了 `DefaultAccessorNamingStrategy` （也可以通过mapstruct-processor获取），并且依靠这个类最大程度上保留了不变的默认行为

[TIP]
了解更多详情： 上述示例存在于我们的示例库中 (https://github.com/mapstruct/mapstruct-examples)。

[[mapping-exclusion-provider]]
=== 映射Exclusion Provider

SPI 名: `org.mapstruct.ap.spi.MappingExclusionProvider`

MapStruct 提供了通过Service Provider Interface（SPI）覆盖 `MappingExclusionProvider` 的可能性。
一个很好的例子是不允许 MapStruct 为特定类型创建自动的子映射、
也就是说，MapStruct 不会尝试为被排除的类型生成自动子映射方法。

[NOTE]
====
`DefaultMappingExclusionProvider` “将排除 `java` 或者 `javax` 包下的所有类型。
这意味着 MapStruct 不会尝试在自定义类型和 Java 类库中声明的类型之间生成自动子映射方法。
====

.Source object
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-test}/nestedbeans/exclusions/custom/Source.java[tag=documentation]
----
====

.Target object
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-test}/nestedbeans/exclusions/custom/Target.java[tag=documentation]
----
====

.Mapper definition
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-test}/nestedbeans/exclusions/custom/ErroneousCustomExclusionMapper.java[tag=documentation]
----
====

我们希望将 `NestedTarget` 排除在自动生成子映射方法之外。

.CustomMappingExclusionProvider
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-test}/nestedbeans/exclusions/custom/CustomMappingExclusionProvider.java[tag=documentation]
----
====


[[custom-builder-provider]]
=== 自定义Builder Provider

SPI 名: org.mapstruct.ap.spi.BuilderProvider

MapStruct 可以通过Service Provider Interface (SPI) 覆盖 `DefaultProvider`。
一个很好的例子就是支持自定义builder策略

.Custom Builder Provider which disables Builder support
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-main}/spi/NoOpBuilderProvider.java[tag=documentation]
----
====

[[custom-enum-naming-strategy]]
=== 自定义枚举命名策略

SPI 名: `org.mapstruct.ap.spi.EnumMappingStrategy`

and the default value for them when mapping from `null` is `UNSPECIFIED`

MapStruct 可以通过Service Provider Interface (SPI) 覆盖 `EnumMappingStrategy`。
当组织内部有枚举遵循某些约定时，您就可以使用这种方法。
例如，所有实现了 `CustomEnumMarker` 接口的枚举都以 `CUSTOM_` 作为前缀，
并且source为 `null` 时，默认值是 `UNSPECIFIED`。

.Normal Enum
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public enum CheeseType {
    BRIE,
    ROQUEFORT;
}
----
====

.Custom marker enum
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public enum CustomCheeseType implements CustomEnumMarker {

    UNSPECIFIED,
    CUSTOM_BRIE,
    CUSTOM_ROQUEFORT;
}
----
====

我们希望在映射 `CheeseType` 和 `CustomCheeseType` 时无需手动定义值映射：

.Custom enum mapping
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
@Mapper
public interface CheeseTypeMapper {

    CheeseType map(CustomCheeseType cheese);

    CustomCheeseType map(CheeseType cheese);
}
----
====

这可以通过实现 SPI `org.mapstruct.ap.spi.EnumMappingStrategy` 来实现，如下例所示。

.Custom enum naming strategy
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class CustomEnumMappingStrategy extends DefaultEnumMappingStrategy {

    @Override
    public String getDefaultNullEnumConstant(TypeElement enumType) {
        if ( isCustomEnum( enumType ) ) {
            return "UNSPECIFIED";
        }

        return super.getDefaultNullEnumConstant( enumType );
    }

    @Override
    public String getEnumConstant(TypeElement enumType, String enumConstant) {
        if ( isCustomEnum( enumType ) ) {
            return getCustomEnumConstant( enumConstant );
        }
        return super.getEnumConstant( enumType, enumConstant );
    }
     protected String getCustomEnumConstant(String enumConstant) {
        if ( "UNSPECIFIED".equals( enumConstant ) ) {
            return MappingConstantsGem.NULL;
        }
         return enumConstant.replace( "CUSTOM_", "" );
    }
     protected boolean isCustomEnum(TypeElement enumType) {
        for ( TypeMirror enumTypeInterface : enumType.getInterfaces() ) {
            if ( typeUtils.asElement( enumTypeInterface ).getSimpleName().contentEquals( "CustomEnumMarker" ) ) {
                return true;
            }
        }
         return false;
    }
}
----
====

生成的 `CheeseMapper` 代码长这样：

.Generated CheeseTypeMapper
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class CheeseTypeMapperImpl implements CheeseTypeMapper {

    @Override
    public CheeseType map(CustomCheeseType cheese) {
        if ( cheese == null ) {
            return null;
        }

        CheeseType cheeseType;

        switch ( cheese ) {
            case UNRECOGNIZED: cheeseType = null;
            break;
            case CUSTOM_BRIE: cheeseType = CheeseType.BRIE;
            break;
            case CUSTOM_ROQUEFORT: cheeseType = CheeseType.ROQUEFORT;
            break;
            default: throw new IllegalArgumentException( "Unexpected enum constant: " + cheese );
        }

        return cheeseType;
    }

    @Override
    public CustomCheeseType map(CheeseType cheese) {
        if ( cheese == null ) {
            return CustomCheeseType.UNSPECIFIED;
        }

        CustomCheeseType customCheeseType;

        switch ( cheese ) {
            case BRIE: customCheeseType = CustomCheeseType.CUSTOM_BRIE;
            break;
            case ROQUEFORT: customCheeseType = CustomCheeseType.CUSTOM_ROQUEFORT;
            break;
            default: throw new IllegalArgumentException( "Unexpected enum constant: " + cheese );
        }

        return customCheeseType;
    }
}
----
====

[[custom-enum-transformation-strategy]]
=== 自定义枚举转换策略

SPI 名: `org.mapstruct.ap.spi.EnumTransformationStrategy`

MapStruct 可以通过Service Provider Interface (SPI) 实现 `EnumTransformationStrategy` 来实现其他转换策略。
一个很好的例子是提供自定义转换策略

.Custom Enum Transformation Strategy which lower-cases the value and applies a suffix
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
include::{processor-ap-test}/value/nametransformation/CustomEnumTransformationStrategy.java[tag=documentation]
----
====
